"use strict";(()=>{var e={};e.id=332,e.ids=[332],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},4375:(e,t,i)=>{i.r(t),i.d(t,{originalPathname:()=>g,patchFetch:()=>v,requestAsyncStorage:()=>w,routeModule:()=>f,serverHooks:()=>M,staticGenerationAsyncStorage:()=>y});var s={};i.r(s),i.d(s,{POST:()=>h,PUT:()=>l,dynamic:()=>p});var r=i(79182),a=i(72007),n=i(56719),o=i(93442),c=i(83178),u=i(18449);class d{static{this.FROM_NUMBER=process.env.SMS_FROM_NUMBER||"+1234567890"}static{this.APP_NAME="Naggery"}static async sendVerificationSMS(e,t){this.APP_NAME;try{return!0}catch(e){return console.error("SMS sending failed:",e),!1}}static async sendSecurityAlertSMS(e,t){({login:`Security alert: New login to your ${this.APP_NAME} account. If this wasn't you, please secure your account immediately.`,password_change:`Your ${this.APP_NAME} password was changed. If this wasn't you, contact support immediately.`,email_change:`Your ${this.APP_NAME} email was changed. If this wasn't you, contact support immediately.`,"2fa_disabled":`Two-factor authentication was disabled on your ${this.APP_NAME} account. If this wasn't you, contact support immediately.`})[t]||this.APP_NAME;try{return!0}catch(e){return console.error("SMS alert sending failed:",e),!1}}static validatePhoneNumber(e){return/^\+[1-9]\d{1,14}$/.test(e)}static formatPhoneNumber(e){let t=e.replace(/[^\d+]/g,"");return t.startsWith("+")?t:`+1${t}`}static maskPhoneNumber(e){if(!e)return"";if(e.length>4){let t=e.slice(-4),i=e.startsWith("+")?e.slice(0,2):"+1";return`${i}***-***-${t}`}return e}}var m=i(35229);let p="force-dynamic";async function h(e){try{let t;let{phone:i,userId:s}=await e.json();if(!i)return o.NextResponse.json({error:"Phone number is required"},{status:400});if(!d.validatePhoneNumber(i))return o.NextResponse.json({error:"Invalid phone number format. Please include country code (e.g., +1234567890)"},{status:400});let r=await m.p.checkSMSAttempts(i);if(!r.allowed)return o.NextResponse.json({error:r.message},{status:429});if(!(t=s?await c._.user.findUnique({where:{id:s}}):await c._.user.findUnique({where:{phone:i}})))return o.NextResponse.json({error:"User not found"},{status:404});let{code:a}=await u.g.createVerificationRequest(t.id,"SMS_VERIFICATION");if(!await d.sendVerificationSMS(i,a))return o.NextResponse.json({error:"Failed to send SMS verification code"},{status:500});return o.NextResponse.json({success:!0,message:"SMS verification code sent successfully",maskedPhone:d.maskPhoneNumber(i)},{status:200})}catch(e){return console.error("SMS verification error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function l(e){try{let{token:t,code:i}=await e.json();if(!t||!i)return o.NextResponse.json({error:"Token and verification code are required"},{status:400});let s=e.headers.get("x-forwarded-for")||"unknown",r=await m.p.checkVerificationAttempts(`${s}:${t}`);if(!r.allowed)return o.NextResponse.json({error:r.message},{status:429});if(!await u.g.verifyCode(t,i))return o.NextResponse.json({error:"Invalid or expired verification code"},{status:400});let a=await u.g.getVerificationRequest(t);if(!a)return o.NextResponse.json({error:"Verification request not found"},{status:404});return await c._.user.update({where:{id:a.userId},data:{phoneVerified:new Date}}),o.NextResponse.json({success:!0,message:"Phone number verified successfully!"},{status:200})}catch(e){return console.error("SMS code verification error:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}let f=new r.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/auth/verify-sms/route",pathname:"/api/auth/verify-sms",filename:"route",bundlePath:"app/api/auth/verify-sms/route"},resolvedPagePath:"/home/ubuntu/naggery_app/app/app/api/auth/verify-sms/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:w,staticGenerationAsyncStorage:y,serverHooks:M}=f,g="/api/auth/verify-sms/route";function v(){return(0,n.patchFetch)({serverHooks:M,staticGenerationAsyncStorage:y})}},83178:(e,t,i)=>{i.d(t,{_:()=>r});var s=i(53524);let r=globalThis.prisma??new s.PrismaClient},35229:(e,t,i)=>{i.d(t,{p:()=>a});var s=i(39103),r=i.n(s);class a{constructor(){this.defaultOptions={windowMs:9e5,maxAttempts:5,message:"Too many attempts, please try again later"},this.cache=new(r())({stdTTL:this.defaultOptions.windowMs/1e3,checkperiod:60})}async checkRateLimit(e,t={}){let i={...this.defaultOptions,...t},s=`rate_limit:${e}`,r=Date.now();i.windowMs;let a=this.cache.get(s)||{count:0,resetTime:r+i.windowMs};r>a.resetTime&&(a={count:0,resetTime:r+i.windowMs}),a.count++;let n=Math.ceil((a.resetTime-r)/1e3);this.cache.set(s,a,n);let o=a.count<=i.maxAttempts;return{allowed:o,remaining:Math.max(0,i.maxAttempts-a.count),resetTime:a.resetTime,message:o?void 0:i.message}}async incrementAttempt(e){await this.checkRateLimit(e)}async resetRateLimit(e){let t=`rate_limit:${e}`;this.cache.del(t)}static async checkLoginAttempts(e){return new a().checkRateLimit(`login:${e}`,{windowMs:9e5,maxAttempts:5,message:"Too many login attempts. Please try again in 15 minutes."})}static async checkVerificationAttempts(e){return new a().checkRateLimit(`verification:${e}`,{windowMs:3e5,maxAttempts:3,message:"Too many verification attempts. Please wait 5 minutes."})}static async check2FAAttempts(e){return new a().checkRateLimit(`2fa:${e}`,{windowMs:6e5,maxAttempts:5,message:"Too many 2FA attempts. Please wait 10 minutes."})}static async checkSMSAttempts(e){return new a().checkRateLimit(`sms:${e}`,{windowMs:36e5,maxAttempts:3,message:"Too many SMS requests. Please wait 1 hour."})}}},18449:(e,t,i)=>{i.d(t,{g:()=>n});var s=i(84770),r=i.n(s),a=i(83178);class n{static{this.CODE_LENGTH=6}static{this.TOKEN_LENGTH=32}static{this.EMAIL_EXPIRY=864e5}static{this.SMS_EXPIRY=6e5}static{this.MAX_ATTEMPTS=5}static generateVerificationCode(){return Math.floor(1e5+9e5*Math.random()).toString()}static generateSecureToken(){return r().randomBytes(this.TOKEN_LENGTH).toString("hex")}static async createVerificationRequest(e,t,i,s){let r=this.generateSecureToken(),n=this.generateVerificationCode(),o="EMAIL_VERIFICATION"===t||"EMAIL_CHANGE"===t?this.EMAIL_EXPIRY:this.SMS_EXPIRY;await a._.verificationRequest.deleteMany({where:{userId:e,type:t,expires:{lt:new Date}}});let c=await a._.verificationRequest.create({data:{userId:e,type:t,token:r,code:"SMS_VERIFICATION"===t?n:void 0,expires:new Date(Date.now()+o)}});return{token:r,code:"SMS_VERIFICATION"===t?n:void 0,expires:c.expires}}static async verifyCode(e,t){let i=await a._.verificationRequest.findUnique({where:{token:e}});return!(!i||i.expires<new Date)&&!i.verified&&!(i.attempts>=this.MAX_ATTEMPTS)&&(await a._.verificationRequest.update({where:{id:i.id},data:{attempts:i.attempts+1}}),i.code===t&&(await a._.verificationRequest.update({where:{id:i.id},data:{verified:!0}}),!0))}static async verifyEmailToken(e){let t=await a._.verificationRequest.findUnique({where:{token:e}});return!(!t||t.expires<new Date)&&!t.verified&&("EMAIL_VERIFICATION"===t.type||"EMAIL_CHANGE"===t.type)&&(await a._.verificationRequest.update({where:{id:t.id},data:{verified:!0}}),!0)}static async getVerificationRequest(e){return a._.verificationRequest.findUnique({where:{token:e},include:{user:!0}})}static async cleanupExpiredRequests(){await a._.verificationRequest.deleteMany({where:{expires:{lt:new Date}}})}}}};var t=require("../../../../webpack-runtime.js");t.C(e);var i=e=>t(t.s=e),s=t.X(0,[372,609,103],()=>i(4375));module.exports=s})();