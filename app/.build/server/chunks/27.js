"use strict";exports.id=27,exports.ids=[27],exports.modules={82595:(e,t,i)=>{i.d(t,{W:()=>s});class s{static{this.SYSTEM_PROMPTS={professional:`You are a professional documentation assistant specializing in converting personal accounts into structured, legally-relevant notes. Your task is to transform user transcriptions into clear, organized bullet points that highlight key incidents, emotions, and important details.

Focus on:
- Factual information and specific incidents
- Emotional states and reactions
- Dates, times, and contextual details
- Patterns of behavior or escalation
- Direct quotes when mentioned
- Categorizing incidents (verbal abuse, emotional manipulation, threats, etc.)

Format your response as structured notes with clear bullet points. Be empathetic but maintain professional objectivity.`,casual:`You are a helpful assistant that organizes personal notes. Convert the user's spoken thoughts into clear, easy-to-read bullet points that capture the main ideas and emotions.

Focus on:
- Key points and important details
- How the person was feeling
- What happened and when
- Important people or situations mentioned
- Any patterns or recurring themes

Keep the tone friendly and supportive while organizing the information clearly.`,legal:`You are a legal documentation specialist. Transform personal accounts into precise, factual notes suitable for legal documentation. Focus strictly on verifiable facts, specific incidents, and measurable impacts.

Prioritize:
- Specific dates, times, and locations
- Direct quotes and exact wording
- Witness information if mentioned
- Documented evidence or communications
- Patterns of behavior with specific examples
- Financial, emotional, or physical impacts
- Violations of agreements or laws

Maintain objectivity and avoid subjective interpretations. Structure information chronologically when possible.`}}static async processText(e,t,i,s){Date.now();try{let a;if(!e?.trim())return{success:!1,error:"No text provided for processing"};if(!i?.trim())return{success:!1,error:"API key not provided"};let o=s?.tone||"professional",r=s?.maxBulletPoints||15,n=s?.includeCategories!==!1,c=s?.includeEmotionalAnalysis!==!1,l=this.SYSTEM_PROMPTS[o],d=this.buildUserPrompt(e,{maxBulletPoints:r,includeCategories:n,includeEmotionalAnalysis:c});if("OPENAI"===t)a=await this.processWithOpenAI(i,l,d);else{if("CLAUDE"!==t)return{success:!1,error:"Unsupported AI provider"};a=await this.processWithClaude(i,l,d)}if(Date.now(),a.success)return{...a,provider:t};return a}catch(e){return console.error("AI processing error:",e),{success:!1,error:e instanceof Error?e.message:"Failed to process text with AI",provider:t}}}static buildUserPrompt(e,t){let i=`Please analyze the following personal account and convert it into structured notes:

"${e}"

`;return i+=`Instructions:
1. Create clear, organized bullet points (maximum ${t.maxBulletPoints} points)
2. Highlight key incidents, emotions, and important details
3. Extract any dates, times, or specific contexts mentioned
4. Focus on actionable or legally-relevant information`,t.includeCategories&&(i+=`
5. Categorize incidents (e.g., verbal abuse, emotional manipulation, threats, harassment, etc.)`),t.includeEmotionalAnalysis&&(i+=`
6. Note emotional states and psychological impacts`),i+=`

Format your response as clean bullet points with clear organization. Be thorough but concise.`}static async processWithOpenAI(e,t,i){try{let e=await fetch("https://apps.abacus.ai/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${process.env.ABACUSAI_API_KEY}`},body:JSON.stringify({model:"gpt-4o-mini",messages:[{role:"system",content:t},{role:"user",content:i}],temperature:.3,max_tokens:2e3})});if(!e.ok){let t=await e.text();throw Error(`OpenAI API error: ${e.status} - ${t}`)}let s=await e.json();if(!s.choices?.[0]?.message?.content)throw Error("Invalid response from OpenAI API");let a=s.choices[0].message.content.trim(),o=this.extractCategories(a),r=this.extractKeyPoints(a),n=this.extractEmotionalContext(a);return{success:!0,notes:a,categories:o,keyPoints:r,emotionalContext:n||void 0}}catch(e){return console.error("OpenAI processing error:",e),{success:!1,error:e instanceof Error?e.message:"OpenAI processing failed"}}}static async processWithClaude(e,t,i){try{let e=await fetch("https://apps.abacus.ai/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${process.env.ABACUSAI_API_KEY}`},body:JSON.stringify({model:"claude-3-5-sonnet-20241022",messages:[{role:"system",content:t},{role:"user",content:i}],temperature:.3,max_tokens:2e3})});if(!e.ok){let t=await e.text();throw Error(`Claude API error: ${e.status} - ${t}`)}let s=await e.json();if(!s.choices?.[0]?.message?.content)throw Error("Invalid response from Claude API");let a=s.choices[0].message.content.trim(),o=this.extractCategories(a),r=this.extractKeyPoints(a),n=this.extractEmotionalContext(a);return{success:!0,notes:a,categories:o,keyPoints:r,emotionalContext:n||void 0}}catch(e){return console.error("Claude processing error:",e),{success:!1,error:e instanceof Error?e.message:"Claude processing failed"}}}static extractCategories(e){let t=[];return[/verbal abuse/gi,/emotional manipulation/gi,/threats/gi,/harassment/gi,/intimidation/gi,/gaslighting/gi,/financial abuse/gi,/isolation/gi,/stalking/gi,/physical aggression/gi].forEach(i=>{let s=e.match(i);if(s){let e=s[0].toLowerCase();t.includes(e)||t.push(e)}}),t}static extractKeyPoints(e){return e.split("\n").map(e=>e.trim()).filter(e=>e.startsWith("•")||e.startsWith("-")||e.startsWith("*")||e.match(/^\d+\./)).map(e=>e.replace(/^[•\-*\d.]\s*/,"").trim()).filter(e=>e.length>10).slice(0,10)}static extractEmotionalContext(e){let t=["anxious","scared","angry","frustrated","sad","depressed","overwhelmed","confused","helpless","afraid","worried","stressed","upset","hurt","devastated","shocked"].filter(t=>e.toLowerCase().includes(t));return t.length>0?`Emotional state includes: ${t.join(", ")}`:null}static async testApiKey(e,t){try{let i=await this.processText("Please respond with exactly: 'API test successful'",e,t,{tone:"casual",maxBulletPoints:1});if(i.success&&i.notes?.includes("API test successful"))return{isValid:!0};return{isValid:!1,error:i.error||"API key test failed"}}catch(e){return{isValid:!1,error:e instanceof Error?e.message:"API key validation failed"}}}}},11826:(e,t,i)=>{i.d(t,{L:()=>l});var s=i(66291),a=i(64617),o=i(83178),r=i(3390),n=i.n(r),c=i(35229);let l={adapter:(0,a.N)(o._),providers:[(0,s.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"},twoFaCode:{label:"2FA Code",type:"text"},backupCode:{label:"Backup Code",type:"text"}},async authorize(e){if(!e?.email||!e?.password)throw Error("Email and password are required");if(!(await c.p.checkLoginAttempts(e.email)).allowed)throw Error("Too many login attempts. Please try again later.");let t=await o._.user.findUnique({where:{email:e.email}});if(!t)throw Error("Invalid email or password");if(t.lockedUntil&&t.lockedUntil>new Date){let e=Math.ceil((t.lockedUntil.getTime()-Date.now())/6e4);throw Error(`Account is locked. Try again in ${e} minutes.`)}if(!await n().compare(e.password,t.password))throw await o._.user.update({where:{id:t.id},data:{loginAttempts:t.loginAttempts+1,lockedUntil:t.loginAttempts>=4?new Date(Date.now()+9e5):null}}),Error("Invalid email or password");if(!t.emailVerified)throw Error("Please verify your email address before logging in. Check your inbox for the verification link.");if(!t.isActive)throw Error("Your account is not active. Please contact support.");if(t.twoFaEnabled){let{twoFaCode:i,backupCode:s}=e;if(!i&&!s)return{id:t.id,email:t.email,name:t.name,phone:t.phone,emailVerified:!!t.emailVerified,phoneVerified:!!t.phoneVerified,twoFaEnabled:t.twoFaEnabled,isActive:t.isActive,requiresTwoFa:!0}}return t.loginAttempts>0&&await o._.user.update({where:{id:t.id},data:{loginAttempts:0,lockedUntil:null}}),{id:t.id,email:t.email,name:t.name,phone:t.phone,emailVerified:!!t.emailVerified,phoneVerified:!!t.phoneVerified,twoFaEnabled:t.twoFaEnabled,isActive:t.isActive,requiresTwoFa:!1}}})],session:{strategy:"jwt",maxAge:2592e3},pages:{signIn:"/login"},callbacks:{jwt:async({token:e,user:t,trigger:i,session:s})=>(t&&(e.id=t.id,e.emailVerified=!!t.emailVerified,e.phoneVerified=!!t.phoneVerified,e.twoFaEnabled=!!t.twoFaEnabled,e.isActive=!!t.isActive,e.requiresTwoFa=!!t.requiresTwoFa),"update"===i&&s&&(e={...e,...s}),e),session:async({session:e,token:t})=>(t&&e.user&&(e.user.id=t.id,e.user.emailVerified=!!t.emailVerified,e.user.phoneVerified=!!t.phoneVerified,e.user.twoFaEnabled=!!t.twoFaEnabled,e.user.isActive=!!t.isActive,e.user.requiresTwoFa=!!t.requiresTwoFa),e)},events:{async signIn({user:e,account:t,profile:i,isNewUser:s}){console.log("User signed in:",{userId:e.id,email:e.email,isNewUser:s})},async signOut({session:e,token:t}){console.log("User signed out:",{userId:t?.id})}}}},83178:(e,t,i)=>{i.d(t,{_:()=>a});var s=i(53524);let a=globalThis.prisma??new s.PrismaClient},35229:(e,t,i)=>{i.d(t,{p:()=>o});var s=i(39103),a=i.n(s);class o{constructor(){this.defaultOptions={windowMs:9e5,maxAttempts:5,message:"Too many attempts, please try again later"},this.cache=new(a())({stdTTL:this.defaultOptions.windowMs/1e3,checkperiod:60})}async checkRateLimit(e,t={}){let i={...this.defaultOptions,...t},s=`rate_limit:${e}`,a=Date.now();i.windowMs;let o=this.cache.get(s)||{count:0,resetTime:a+i.windowMs};a>o.resetTime&&(o={count:0,resetTime:a+i.windowMs}),o.count++;let r=Math.ceil((o.resetTime-a)/1e3);this.cache.set(s,o,r);let n=o.count<=i.maxAttempts;return{allowed:n,remaining:Math.max(0,i.maxAttempts-o.count),resetTime:o.resetTime,message:n?void 0:i.message}}async incrementAttempt(e){await this.checkRateLimit(e)}async resetRateLimit(e){let t=`rate_limit:${e}`;this.cache.del(t)}static async checkLoginAttempts(e){return new o().checkRateLimit(`login:${e}`,{windowMs:9e5,maxAttempts:5,message:"Too many login attempts. Please try again in 15 minutes."})}static async checkVerificationAttempts(e){return new o().checkRateLimit(`verification:${e}`,{windowMs:3e5,maxAttempts:3,message:"Too many verification attempts. Please wait 5 minutes."})}static async check2FAAttempts(e){return new o().checkRateLimit(`2fa:${e}`,{windowMs:6e5,maxAttempts:5,message:"Too many 2FA attempts. Please wait 10 minutes."})}static async checkSMSAttempts(e){return new o().checkRateLimit(`sms:${e}`,{windowMs:36e5,maxAttempts:3,message:"Too many SMS requests. Please wait 1 hour."})}}}};