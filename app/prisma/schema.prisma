
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/naggery_app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  phone         String?   @unique
  gender        Gender?
  termsAccepted Boolean   @default(false)
  termsAcceptedAt DateTime?
  emailVerified DateTime?
  phoneVerified DateTime?
  twoFaEnabled  Boolean   @default(false)
  twoFaSecret   String?
  isActive      Boolean   @default(false)
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  entries       Entry[]
  backupCodes   BackupCode[]
  verificationRequests VerificationRequest[]
  apiKeys       ApiKey[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id        String            @id @default(cuid())
  userId    String
  type      VerificationType
  token     String            @unique
  code      String?
  attempts  Int               @default(0)
  verified  Boolean           @default(false)
  expires   DateTime
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expires])
}

model BackupCode {
  id      String  @id @default(cuid())
  userId  String
  code    String
  used    Boolean @default(false)
  usedAt  DateTime?
  createdAt DateTime @default(now())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, code])
}

enum VerificationType {
  EMAIL_VERIFICATION
  SMS_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
  TWO_FA_SETUP
}

model Entry {
  id                String           @id @default(cuid())
  userId            String
  type              EntryType
  title             String?
  content           String?
  voiceUrl          String?
  transcription     String?          // Voice-to-text transcription
  aiNotes           String?          // AI-generated pointed notes
  processingStatus  ProcessingStatus @default(NONE)
  aiProvider        String?          // 'openai' or 'claude'
  mood              Mood
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model ApiKey {
  id          String      @id @default(cuid())
  userId      String
  provider    ApiProvider
  keyName     String      // User-friendly name for the key
  encryptedKey String     // Encrypted API key
  isActive    Boolean     @default(true)
  lastUsed    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, provider])
}

enum EntryType {
  TEXT
  VOICE
}

enum Mood {
  HAPPY
  NEUTRAL
  ANGRY
  SAD
  CONFUSED
  FRUSTRATED
  ANXIOUS
  CALM
}

enum ProcessingStatus {
  NONE           // No processing needed/requested
  TRANSCRIBING   // Converting voice to text
  GENERATING     // Generating AI notes from transcription
  COMPLETED      // AI processing completed
  FAILED         // Processing failed
}

enum ApiProvider {
  OPENAI
  CLAUDE
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}
