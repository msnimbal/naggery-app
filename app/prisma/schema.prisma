generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/naggery-app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Application Models
model User {
    id                   String   @id @default(cuid())
    email                String   @unique
    password             String?  // For credential auth
    name                 String?
    gender               String   // Required field as per requirements
    emailVerified        DateTime?
    twoFactorEnabled     Boolean  @default(false)
    image                String?
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    // Relations
    accounts       Account[]
    sessions       Session[]
    journalEntries JournalEntry[]
    voiceRecordings VoiceRecording[]
    settings       UserSettings?
}

model JournalEntry {
    id        String   @id @default(cuid())
    userId    String
    title     String
    content   String   @db.Text // Rich text content
    tags      String[] // Array of tags for categorization
    encrypted Boolean  @default(false) // Flag for encrypted content
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([createdAt])
}

model VoiceRecording {
    id            String   @id @default(cuid())
    userId        String
    title         String?  // Optional title
    audioFileUrl  String   // URL to stored audio file
    transcription String?  @db.Text // AI-generated transcription
    duration      Int?     // Duration in seconds
    encrypted     Boolean  @default(false) // Flag for encrypted content
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([createdAt])
}

model UserSettings {
    id                      String @id @default(cuid())
    userId                  String @unique
    privacySettings         Json   @default("{}")
    notificationPreferences Json   @default("{}")
    themePreferences        Json   @default("{}")
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
